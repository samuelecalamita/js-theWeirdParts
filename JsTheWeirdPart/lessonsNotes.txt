BIG WORD ALERTS
- Syntax Parser: 
A program that read your code and determines what it does and if its grammar is valid. 
I write js, the parser read check and interpret my code. 
The Parser go trough character per character to my code, that is human readable, and compile my code in a language that is computer readable.
- Lexical Environment:
Where something sits physically in the code you write. 
A Lexical Environment exists in programming languages in which where you write something is important.
- Execution Context:
A wrapper that help manage the code that is running.



CONCEPTUAL ASIDE
- name/value pair:
a name which maps to a unique value
ex.
    address = '100 Main str.'
where address is Name and '100 Main str.' is a value.
- Object:
is a collection of name/value pairs, where a value can be another name/value pairs.



- Execution context (Global):
the things that runs on the first level in the Project.
The execution Context create 2 things from the js engine, in the case on browser create:
Global Object(window) and 'this' that at the global level are the same things.
Global it means not inside a function, but on the first level.
When code is executed an execution context is created, at the base level, 
you have a global object that is the window and a special variable that is 'this' and is the same of of the global object.



The execution Context, first phase: creation and hoisting
- hoisting:
Setup Memory Space for Variables and Functions, before the code runs.
The function is entirely place in the memory space from the js engine, 
for Variables the js engine put a placeolder for the value of the variable equal to 'undefined'

CONCEPTUAL ASIDE
is not defined and undefined are not the same thing!!!
undefined is a special value that says that a variable hasn´t been set.
Is not defined Is an error.
Don´t set a variable equal to undefined, because it´s always hard to understand 
if the value is undefined because you set the variable or if the js engine set undefined.



The execution Context, second phase: code execution
Javascirpt run the code line by line, when it finds a function invocation, it jumps into the function, 
it runs the function line by line inside it,
and then jump outside that function and contuine to run the code from where it was.

BIG WORD ALERTS
- js is single threaded:
there's only one process on your computer's processor running the code.
- js is Synchronous:
meaning the code is executed one line at a time.(but there is also an asynchronous part)



FUNCTION INVOCATION AND THE EXECUTION STACK
- Invocation: 
run/call a function
- execution stack: 
when i call a function an execution context is created, and is put on the execution stack.



FUNCTIONS, CONTEXT AND VARIABLE ENVIRONMENTS
- variable environment (scope): 
where the variable live nad how to relate each other in memory. Every execution context has its variable environment.



THE SCOPE CHAIN
if your code looks for a variable that is not declared in its scope, in the case of a function
the js engine looks in the outher environment (outside the function) 
where the function is sitted lexically (where the function is declared),
and not where is called!



SCOPE, ES6, AND let
- scope: 
is where a variable is available in your code.
- let:
is a new way to declare variable in ES6, allows the js engine to use the block scoping,
a let will be seen just inside a {block},
you can´t call a let variable before the declaration of it, because will not be hoisted.



WHAT ABOUT ASYNCHRONOUS CALLBACKS
- Asynchronus:
more than one at a time.



TYPES AND JAVASCRIPT
- Dynamic Typing:
you don´t tell the engine what type of data a variable holds, it figures it out while your code is running.



PRIMITIVE TYPES
a type of data that rapresent a single value, for example:
- undefined: the code as never set a value (we let the engine assign this value)
- null: something isn´t been set (we could declare a variable with this value)
- boolean: true or false
- number: Floating Point number, there´s always some decimals.
- string: a sequence of charachter between '' or ""
- symbol: it comes with ES6....



OPERATORS
a special function synthactically written different, that normal accept 2 parameters.( + - * / % )  

OPERATORS PRECEDENCE AND ASSOCIATIVITY
- Operator precedence:
Which operator function gets called first
- Associativity:
What order operator functions get called in: left-to-right or right-to-left.
We can check associativity and precendence here -> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence




COERCION
converting a value from one type to another. 
If you try to do 1 + '2' the js engine will convert the first number to a string and will return 12 as result, 
that ´s can be confusing when you are writing a lot of code.

COMPARISON OPERATORS
Try to compare value that are the same type and use 99% times the strict equals operator ===
1 == '1' -> true for coercion
1 === '1' -> false
1 === 1 -> true


EXISTENCE AND BOOLEAN
We can take advantage of comparison operator with if statement, 
because we can check if a variable is defined and run code when it is.

    var a;

    a = '12';

    if ( a || a === 0 ) {
        // hier coercied the value of a with true
        console.log('Something is there!');
    } 
    else {
        console.log('Nope, nothing is declared.');
    }



DEFAULT VALUES

    function greet(name) {
        name = name || '<Your name here>'; // instead of return undefined i use this 
        console.log('Hello ' + name);
    }

    greet('Samuele');
    greet();

    //result
    Hello Samuele
    Hello <Your name here>




OBJECTS AND FUNCTIONS
Objects are a collection of name value pairs, and those values can be other collections of name values pairs.
An object can have propertys and methods (methods are functions sitting in object).

var person = new Object();           // syntax for create object named person

person['firstname'] = 'Samuele';     // i use this for setting in person the property firstname with value samuele
person['lastname'] = 'Calamita';     // the same for setting the lastname

var firstNameProperty = 'firstname'; // just setting a variable with the value of the property firstname

console.log(person);                 // print the object person
console.log(person[firstNameProperty]); // print the firstname value object person

console.log(person.firstname)        // shorthand syntax for printing the firstname value object person  

person.address = new Object();       // create an object address in the object person
person.address.street = 'triftstrasse 37'; // create property street with the value in the oject address that sits inside the object person
person.address.city = 'Berlin';      // the same with city
person.address.state = 'Germany';    // and again the same with state

console.log(person.address.street);  // print the street with the shorthand syntax
console.log(person.address.city);    // print the city with the shorthand syntax
console.log(person['address']['street']);// print the street with the non-shorthand syntax



OBJECTS AND OBJECTS LITERALS
it´s a shorthand way to declare an obeject and declare its values.

var person = {};                     // shorthand syntax for create object named person

var Samu = {                       // shorthand syntax for declares property and set values
    firstname: 'Samuele', 
    lastname: 'Calamita',
    address: {
        street: 'Triftstrasse 37',
        city: 'Berlin',
        state: 'Germany'
    }};

function greet(person) {           // i make a function where i can greet the person  
    console.log('Hello ' + person.firstname);
}

greet(Samu);                       // call the funtion

greet({                            // i can also set new values in the object
    firstname: 'Angeli',
    lastname: 'Schimmack'
});



FRAMEWORK ASIDE: FAKING NAMESPACES
- namespace:
is a container/holder for variables and function

var greet = 'Hello!';
var greet = 'Hola!';

console.log(greet);        // if i try to call greet i will get the just the secondo greet.

var english = {            // i could solve this using an object.
    greet: 'Hello!';
} 
var spanish = {           
    greet: 'Hola!';
} 



JSON AND OBJECT LITERALS
